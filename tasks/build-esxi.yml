---
- set_fact:
    boot_iso: rhel-boot.iso
    date_label: "{{ lookup('pipe', 'date +%y%m%d') }}"

- set_fact:
    esxi_guest_id: rhel8_64Guest
  when: "'rhel-8' in os"

- set_fact:
    esxi_guest_id: rhel9_64Guest
  when: "'rhel-9' in os"

# download rhel boot iso if it does not exist
- name: check rhel boot iso file
  community.vmware.vsphere_file:
    host: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    datastore: "{{ esxi_datastore }}"
    path: "{{ boot_iso }}"
    state: file
    timeout: 120
  register: result_boot_file
  ignore_errors: yes

- debug:
    var: result_boot_file

- name: download boot iso and upload to datastore
  block:
    - name: download rhel-boot iso
      get_url:
        url: "https://download-node-02.eng.bos.redhat.com/rhel-8/rel-eng/RHEL-8/RHEL-8.6.0-RC-1.0/compose/BaseOS/x86_64/iso/RHEL-8.6.0-20220420.3-BaseOS-x86_64-boot.iso"
        dest: "{{ playbook_dir }}/{{ boot_iso }}"
        checksum: "sha256:4a3ffcec86ba40c89fc2608c8e3bb00b71d572da219f30904536cdce80b58e76"
        timeout: 5400
      register: download_result
      retries: 3
      delay: 3
      until: download_result.status_code == 200

    - name: "upload {{ boot_iso }}"
      community.vmware.vsphere_copy:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ esxi_datacenter }}"
        datastore: "{{ esxi_datastore }}"
        src: "{{ playbook_dir }}/{{ boot_iso }}"
        path: "{{ boot_iso }}"
        timeout: 300
  when: result_boot_file.status == 404

- name: create kickstart file
  template:
    src: rhel-8-esxi-ks-cfg.j2
    dest: "{{ playbook_dir }}/ks.cfg"
  when:
    - "'rhel-8' in os"

- name: create kickstart file
  template:
    src: rhel-9-esxi-ks-cfg.j2
    dest: "{{ playbook_dir }}/ks.cfg"
  when:
    - "'rhel-9' in os"

- name: create kickstart iso
  command: mkisofs -V "OEMDRV" -o "{{ playbook_dir }}/ks-{{ os }}-{{ esxi_firmware }}.iso" "{{ playbook_dir  }}/ks.cfg"

- name: "delete ks-{{ os }}-{{ esxi_firmware }}.iso if it exists"
  community.vmware.vsphere_file:
    host: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    datastore: "{{ esxi_datastore }}"
    path: "ks-{{ os }}-{{ esxi_firmware }}.iso"
    state: absent

- name: "upload ks-{{ os }}-{{ esxi_firmware }}.iso"
  community.vmware.vsphere_copy:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    datastore: "{{ esxi_datastore }}"
    src: "{{ playbook_dir }}/ks-{{ os }}-{{ esxi_firmware }}.iso"
    path: "ks-{{ os }}-{{ esxi_firmware }}.iso"
    timeout: 300

- name: "install {{ os }}"
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    name: "{{ esxi_template }}-{{ date_label }}"
    folder: ""
    state: poweredon
    guest_id: "{{ esxi_guest_id }}"
    esxi_hostname: "{{ esxi_host }}"
    disk:
      - size_gb: "{{ esxi_disk_gb }}"
        type: thin
        datastore: "{{ esxi_datastore }}"
    hardware:
      num_cpus: "{{ esxi_cpu }}"
      memory_mb: "{{ esxi_memory_mb }}"
      scsi: paravirtual
      boot_firmware: "{{ esxi_firmware }}"
    networks:
      - name: "{{ esxi_network }}"
        device_type: "{{ esxi_nic_type }}"
        start_connected: true
        type: dhcp
    cdrom:
      - contcontroller_type: ide
        controller_number: 0
        unit_number: 0
        type: iso
        iso_path: "[{{ esxi_datastore }}] {{ boot_iso }}"
      - contcontroller_type: ide
        controller_number: 0
        unit_number: 1
        type: iso
        iso_path: "[{{ esxi_datastore }}] ks-{{ os }}-{{ esxi_firmware }}.iso"
  register: new_guest

- name: get uuid and make it a variable
  set_fact:
    hw_uuid: "{{ new_guest.instance.hw_product_uuid  }}"

- name: wait until vm powered-off (installation finished)
  community.vmware.vmware_guest_info:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    uuid: "{{ hw_uuid }}"
  register: facts
  until: facts.instance.hw_power_status == "poweredOff"
  retries: 180
  delay: 10

- name: remove two cdroms before making template
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    esxi_hostname: "{{ esxi_host }}"
    uuid: "{{ hw_uuid }}"
    cdrom:
      - contcontroller_type: ide
        controller_number: 0
        unit_number: 0
        state: absent
      - contcontroller_type: ide
        controller_number: 0
        unit_number: 1
        state: absent

- name: start vm to set tools info
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    uuid: "{{ hw_uuid }}"
    state: poweredon
    state_change_timeout: 120

- name: wait for ip _really_ being available
  community.vmware.vmware_guest_info:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    uuid: "{{ hw_uuid }}"
  register: facts
  until: facts.instance.ipv4 is not none
  retries: 30
  delay: 5

- name: get vm tools info
  community.vmware.vmware_guest_tools_info:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    uuid: "{{ hw_uuid }}"

- name: stop vm to make template
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    esxi_hostname: "{{ esxi_host }}"
    uuid: "{{ hw_uuid }}"
    state: poweredoff
    state_change_timeout: 120

- name: wait until vm powered-off
  community.vmware.vmware_guest_info:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    uuid: "{{ hw_uuid }}"
  register: facts
  until: facts.instance.hw_power_status == "poweredOff"
  retries: 180
  delay: 10

# template for test
- name: convert to template
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    esxi_hostname: "{{ esxi_host }}"
    uuid: "{{ hw_uuid }}"
    name: "{{ esxi_template }}-tmp"
    is_template: yes

- name: get template tools info
  community.vmware.vmware_guest_tools_info:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    uuid: "{{ hw_uuid }}"

# test template
- block:
    - name: "clone vm from template {{ esxi_template }}-tmp"
      community.vmware.vmware_guest:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ esxi_datacenter }}"
        esxi_hostname: "{{ esxi_host }}"
        name: "test-{{ esxi_template }}-tmp"
        folder: ""
        state: poweredon
        template: "{{ esxi_template }}-tmp"
        guest_id: "{{ esxi_guest_id }}"
        disk:
          - size_gb: "{{ esxi_disk_gb }}"
            type: thin
            datastore: "{{ esxi_datastore }}"
        hardware:
          num_cpus: "{{ esxi_cpu }}"
          hotadd_cpu: True
          hotremove_cpu: True
          memory_mb: "{{ esxi_memory_mb }}"
          hotadd_memory: True
          scsi: paravirtual
          boot_firmware: "{{ esxi_firmware }}"
        networks:
          - name: "{{ esxi_network }}"
            device_type: "{{ esxi_nic_type }}"
            start_connected: true
            type: dhcp
        wait_for_ip_address: yes
      register: test_guest

    - name: get uuid and make it a variable
      set_fact:
        test_guest_uuid: "{{ test_guest.instance.hw_product_uuid }}"

    - name: in case no ip address assigned or stuck at mount
      block:
        - name: wait for ip _really_ being available
          community.vmware.vmware_guest_info:
            hostname: "{{ vsphere_server }}"
            username: "{{ vsphere_username }}"
            password: "{{ vsphere_password }}"
            validate_certs: no
            datacenter: "{{ esxi_datacenter }}"
            uuid: "{{ test_guest_uuid }}"
          register: facts
          until: facts.instance.ipv4 is not none
          retries: 30
          delay: 5
      rescue:
        - name: poweroff guest
          community.vmware.vmware_guest:
            hostname: "{{ vsphere_server }}"
            username: "{{ vsphere_username }}"
            password: "{{ vsphere_password }}"
            validate_certs: no
            datacenter: "{{ esxi_datacenter }}"
            esxi_hostname: "{{ esxi_host }}"
            uuid: "{{ test_guest_uuid }}"
            state: poweredoff
            state_change_timeout: 120
        - name: start guest
          community.vmware.vmware_guest:
            hostname: "{{ vsphere_server }}"
            username: "{{ vsphere_username }}"
            password: "{{ vsphere_password }}"
            validate_certs: no
            datacenter: "{{ esxi_datacenter }}"
            esxi_hostname: "{{ esxi_host }}"
            uuid: "{{ test_guest_uuid }}"
            state: poweredon
            state_change_timeout: 120
        - name: wait for ip _really_ being available
          community.vmware.vmware_guest_info:
            hostname: "{{ vsphere_server }}"
            username: "{{ vsphere_username }}"
            password: "{{ vsphere_password }}"
            validate_certs: no
            datacenter: "{{ esxi_datacenter }}"
            uuid: "{{ test_guest_uuid }}"
          register: facts
          until: facts.instance.ipv4 is not none
          retries: 30
          delay: 5

    - name: waits until instance is reachable
      wait_for:
        host: "{{ facts.instance.ipv4 }}"
        port: 22
        search_regex: OpenSSH
        delay: 10
        timeout: 1800

    - name: add instance to guest group
      add_host:
        name: "{{ facts.instance.ipv4 }}"
        group: guest

    - name: keep private key permission to 600
      file:
        path: "{{ playbook_dir }}/key/identity"
        mode: "0600"

    - name: check /opt/ltp/runltp exist or not
      stat:
        path: /opt/ltp/runltp
      register: result_stat
      delegate_to: "{{ facts.instance.ipv4 }}"

    - name: building esxi image fail
      fail:
        msg: "building esxi {{ os }} {{ esxi_firmware }} image fail"
      when: not result_stat.stat.exists

  rescue:
    - name: "remove template {{ esxi_template }}-tmp"
      community.vmware.vmware_guest:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ esxi_datacenter }}"
        esxi_hostname: "{{ esxi_host }}"
        name: "{{ esxi_template }}-tmp"
        is_template: yes
        state: absent

    - name: shut down template test vm
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        uuid: "{{ test_guest_uuid }}"
        state: powered-off

    - name: remove template test vm
      community.vmware.vmware_guest:
        hostname: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ esxi_datacenter }}"
        esxi_hostname: "{{ esxi_host }}"
        uuid: "{{ test_guest_uuid }}"
        state: absent

    - name: "delete ks-{{ os }}-{{ esxi_firmware }}.iso finally"
      community.vmware.vsphere_file:
        host: "{{ vsphere_server }}"
        username: "{{ vsphere_username }}"
        password: "{{ vsphere_password }}"
        validate_certs: no
        datacenter: "{{ esxi_datacenter }}"
        datastore: "{{ esxi_datastore }}"
        path: "ks-{{ os }}-{{ esxi_firmware }}.iso"
        state: absent

    - name: building esxi image fail
      fail:
        msg: "building esxi {{ os }} {{ esxi_firmware }} image fail"

- name: shut down template test vm
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    uuid: "{{ test_guest_uuid }}"
    state: powered-off

- name: remove template test vm
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    esxi_hostname: "{{ esxi_host }}"
    uuid: "{{ test_guest_uuid }}"
    state: absent

- name: "delete ks-{{ os }}-{{ esxi_firmware }}.iso finally"
  community.vmware.vsphere_file:
    host: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    datastore: "{{ esxi_datastore }}"
    path: "ks-{{ os }}-{{ esxi_firmware }}.iso"
    state: absent

- name: remove current template
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    esxi_hostname: "{{ esxi_host }}"
    name: "{{ esxi_template }}"
    is_template: yes
    state: absent

- name: rename template
  community.vmware.vmware_guest:
    hostname: "{{ vsphere_server }}"
    username: "{{ vsphere_username }}"
    password: "{{ vsphere_password }}"
    validate_certs: no
    datacenter: "{{ esxi_datacenter }}"
    esxi_hostname: "{{ esxi_host }}"
    uuid: "{{ hw_uuid }}"
    name: "{{ esxi_template }}"
    is_template: yes
