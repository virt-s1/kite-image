---
- name: set default ami arch
  set_fact:
    ami_arch: "x86_64"
    of_disk: "/dev/xvdb"

- name: set ami arch to arm64 for aarch64 arch
  set_fact:
    ami_arch: "arm64"
    of_disk: "/dev/nvme1n1"
  when: arch == "aarch64"

- name: get all availability zones
  amazon.aws.aws_az_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
  register: ec2_zones

- debug:
    var: ec2_zones

- name: create VPC
  amazon.aws.ec2_vpc_net:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "kite.imagebuild"
    cidr_block: "172.30.0.0/16"
    tags:
      kite: "kite.imagebuild"
  register: ec2_vpc

- debug:
    var: ec2_vpc

- name: add internet gateway for VPC
  amazon.aws.ec2_vpc_igw:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.vpc.id }}"
    tags:
      kite: "kite.imagebuild"
  register: ec2_vpc_igw

- debug:
    var: ec2_vpc_igw

- name: "create subnet for VPC in {{ ec2_zones.availability_zones[0] }}"
  amazon.aws.ec2_vpc_subnet:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.vpc.id }}"
    cidr: "172.30.30.0/24"
    az: "{{ ec2_zones.availability_zones[-2].zone_name }}"
    tags:
      kite: "kite.imagebuild"
  register: ec2_vpc_subnet

- debug:
    var: ec2_vpc_subnet

- name: add default route in route table for all vpc subnets
  amazon.aws.ec2_vpc_route_table:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.vpc.id }}"
    subnets:
      - "{{ ec2_vpc_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ ec2_vpc_igw.gateway_id }}"
    tags:
      kite: "kite.imagebuild"
  register: ec2_vpc_route_table

- debug:
    var: ec2_vpc_route_table

- name: create security group
  amazon.aws.ec2_group:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.vpc.id }}"
    name: "kite.imagebuild"
    description: kite image building security group
    rules:
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0
    tags:
      kite: "kite.imagebuild"
  register: ec2_security_group

- debug:
    var: ec2_security_group

- name: delete keypare first if exist
  amazon.aws.ec2_key:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "kite.imagebuild.{{ os }}.{{ arch }}"
    state: absent

- name: generate and add ssh keypair
  amazon.aws.ec2_key:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "kite.imagebuild.{{ os }}.{{ arch }}"
    key_material: "{{ lookup('file', 'key/identity.pub')  }}"

- name: create ec2 instance
  amazon.aws.ec2_instance:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    security_group: "{{ ec2_security_group.group_id }}"
    image_id: "{{ fedora_ami[arch] }}"
    instance_type: "{{ builder_instance_type[arch] }}"
    vpc_subnet_id: "{{ ec2_vpc_subnet.subnet.id }}"
    key_name: "kite.imagebuild.{{ os }}.{{ arch }}"
    state: present
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 20
          volume_type: gp2
          delete_on_termination: true
    network:
      assign_public_ip: yes
      subnet_id: "{{ ec2_vpc_subnet.subnet.id }}"
    user_data: |
      #cloud-config
      packages:
        - python3
        - python3-dnf
        - qemu-img
    tags:
      kite: "kite.imagebuild.{{ os }}.{{ arch }}"
    wait: yes
  register: ec2_instance

- debug:
    var: ec2_instance

- name: wait until public ip address is assigned
  amazon.aws.ec2_instance_info:
    instance_ids: "{{ ec2_instance.instance_ids[0] }}"
  register: result_ec2_instance_status
  retries: 30
  delay: 10
  until: result_ec2_instance_status.instances[0].state.name == "running"

- set_fact:
    ec2_instance_ip: "{{ result_ec2_instance_status.instances[0].public_ip_address }}"
    ec2_instance_id: "{{ result_ec2_instance_status.instances[0].instance_id }}"

- name: waits until ssh is reachable
  wait_for:
    host: "{{ ec2_instance_ip }}"
    port: 22
    search_regex: OpenSSH
    delay: 10

- name: add instance to dder group
  add_host:
    name: "{{ ec2_instance_ip }}"
    group: dder

- name: keep private key permission to 600
  file:
    path: "{{ playbook_dir }}/key/identity"
    mode: "0600"

- name: ensure cloud-init has finished
  raw: test -f /var/lib/cloud/instance/boot-finished
  retries: 60
  register: cloud_init_check
  changed_when: false
  until: cloud_init_check is success
  delegate_to: "{{ ec2_instance_ip }}"

- name: attach a new volume for dd
  amazon.aws.ec2_vol:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    instance: "{{ ec2_instance_id }}"
    name: "vol_for_{{ ec2_instance_id }}"
    device_name: /dev/sdb
    zone: "{{ ec2_zones.availability_zones[-2].zone_name }}"
    volume_size: "12"
    volume_type: gp2
    tags:
      kite: "kite.imagebuild.{{ os }}.{{ arch }}"
  register: ec2_volume

- debug:
    var: ec2_volume

- name: upload qcow2 image to instance
  copy:
    src: "{{ playbook_dir }}/{{ os }}_{{ arch }}.qcow2"
    dest: /home/fedora
  delegate_to: "{{ ec2_instance_ip }}"

- name: convert qcow2 to raw for dd
  command: "qemu-img convert -O raw /home/fedora/{{ os }}_{{ arch }}.qcow2 /home/fedora/{{ os }}_{{ arch }}.raw"
  become: yes
  delegate_to: "{{ ec2_instance_ip }}"

- name: dd raw file to the 2nd volume
  command: "dd if=/home/fedora/{{ os }}_{{ arch }}.raw of={{ of_disk }}"
  become: yes
  delegate_to: "{{ ec2_instance_ip }}"

- name: check disk status
  command: fdisk -l
  become: yes
  register: result_fdisk
  delegate_to: "{{ ec2_instance_ip }}"

- debug:
    var: result_fdisk

- name: terminate instance
  amazon.aws.ec2_instance:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    instance_ids: "{{ ec2_instance_id }}"
    state: absent
    wait: yes

# security group can be deleted only when instance state is at terminated
# and can't be deleted if instance state is at shutting-down
- name: wait until instance terminated
  amazon.aws.ec2_instance_info:
    instance_ids:
      - "{{ ec2_instance_id }}"
  register: result_instance_status
  retries: 30
  delay: 10
  until: result_instance_status.instances[0].state.name == "terminated"

- name: make snapshot of attached volume
  amazon.aws.ec2_snapshot:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    volume_id: "{{ ec2_volume.volume_id }}"
    description: "snapshot {{ os }} image taken on {{ ansible_date_time.iso8601  }}"
    snapshot_tags:
      kite: "kite.imagebuild.{{ os }}.{{ arch }}"
    wait: yes
    wait_timeout: 1200
  register: ec2_snapshot

- debug:
    var: ec2_snapshot

- name: AMI registration from EBS Snapshot
  amazon.aws.ec2_ami:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "kite.tmp.imagebuild.{{ os }}.{{ arch }}"
    description: "{{ os }} {{ arch }} ami built on {{ ansible_date_time.iso8601  }}"
    state: present
    architecture: "{{ ami_arch }}"
    virtualization_type: hvm
    root_device_name: /dev/xvda
    device_mapping:
      - device_name: /dev/xvda
        volume_size: 12
        snapshot_id: "{{ ec2_snapshot.snapshot_id }}"
        delete_on_termination: true
        volume_type: gp2
    enhanced_networking: yes
    sriov_net_support: simple
    tags:
      kite: "kite.tmp.imagebuild.{{ os }}.{{ arch }}"
  register: ec2_ami

- debug:
    var: ec2_ami

- name: deatch the 2nd EBS volume
  amazon.aws.ec2_vol:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    id: "{{ ec2_volume.volume_id }}"
    instance: None

- name: delete the 2nd EBS volume
  amazon.aws.ec2_vol:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    id: "{{ ec2_volume.volume_id }}"
    state: absent

# test AMI
- block:
    - name: create ec2 instance
      amazon.aws.ec2_instance:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        security_group: "{{ ec2_security_group.group_id }}"
        image_id: "{{ ec2_ami.image_id }}"
        instance_type: "{{ builder_instance_type[arch] }}"
        vpc_subnet_id: "{{ ec2_vpc_subnet.subnet.id }}"
        key_name: "kite.imagebuild.{{ os }}.{{ arch }}"
        state: present
        volumes:
          - device_name: /dev/xvda
            ebs:
              volume_size: 12
              volume_type: gp2
              delete_on_termination: true
        network:
          assign_public_ip: yes
          subnet_id: "{{ ec2_vpc_subnet.subnet.id }}"
        tags:
          kite: "kite.imagebuild.{{ os }}.{{ arch }}"
        wait: yes
      register: test_ec2_instance

    - debug:
        var: test_ec2_instance

    - name: wait until public ip address is assigned
      amazon.aws.ec2_instance_info:
        instance_ids: "{{ test_ec2_instance.instance_ids[0] }}"
      register: result_test_ec2_instance_status
      retries: 30
      delay: 10
      until: result_test_ec2_instance_status.instances[0].state.name == "running"

    - set_fact:
        test_ec2_instance_ip: "{{ result_test_ec2_instance_status.instances[0].public_ip_address }}"
        test_ec2_instance_id: "{{ result_test_ec2_instance_status.instances[0].instance_id }}"

    - name: waits until ssh is reachable
      wait_for:
        host: "{{ test_ec2_instance_ip }}"
        port: 22
        search_regex: OpenSSH
        delay: 10

    - name: add instance to guest group
      add_host:
        name: "{{ test_ec2_instance_ip }}"
        group: guest

    - name: keep private key permission to 600
      file:
        path: "{{ playbook_dir }}/key/identity"
        mode: "0600"

    - name: ensure cloud-init has finished
      raw: test -f /var/lib/cloud/instance/boot-finished
      retries: 60
      register: cloud_init_check
      changed_when: false
      until: cloud_init_check is success
      delegate_to: "{{ test_ec2_instance_ip }}"

    - name: check /opt/ltp/runltp exist or not
      stat:
        path: /opt/ltp/runltp
      register: result_stat
      delegate_to: "{{ test_ec2_instance_ip }}"

    - name: building aws ami fail
      fail:
        msg: "building aws ami {{ os }} {{ arch }} fail"
      when: not result_stat.stat.exists

  rescue:
    - name: deregister test ami because ami test failure
      amazon.aws.ec2_ami:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        image_id: "{{ ec2_ami.image_id }}"
        delete_snapshot: True
        state: absent

    - name: building aws ami fail
      fail:
        msg: "building aws ami {{ os }} {{ arch }} fail"

  always:
    - name: terminate ami test instance
      amazon.aws.ec2_instance:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        instance_ids: "{{ test_ec2_instance_id }}"
        state: absent
        wait: yes

    # security group can be deleted only when instance state is at terminated
    # and can't be deleted if instance state is at shutting-down
    - name: wait until instance terminated
      amazon.aws.ec2_instance_info:
        instance_ids:
          - "{{ test_ec2_instance_id }}"
      register: result_instance_status
      retries: 30
      delay: 10
      until: result_instance_status.instances[0].state.name == "terminated"

    - name: delete keypair
      amazon.aws.ec2_key:
        profile: "{{ aws_profile }}"
        region: "{{ aws_region }}"
        name: "kite.imagebuild.{{ os }}.{{ arch }}"
        state: absent

- name: get old ami info
  amazon.aws.ec2_ami_info:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    filters:
      "tag:kite": "kite-image-{{ os }}-{{ arch }}"
  register: result_ami

- debug:
    var: result_ami

- name: deregister old amis
  amazon.aws.ec2_ami:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    image_id: "{{ item }}"
    delete_snapshot: True
    state: absent
  loop: "{{ result_ami.images | map(attribute='image_id') | list }}"

- name: deregister test ami
  amazon.aws.ec2_ami:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    image_id: "{{ ec2_ami.image_id }}"
    delete_snapshot: False
    state: absent

- name: AMI registration from EBS Snapshot
  amazon.aws.ec2_ami:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "kite-image-{{ os }}-{{ arch }}"
    description: "{{ os }} {{ arch }} ami built on {{ ansible_date_time.iso8601  }}"
    state: present
    architecture: "{{ ami_arch }}"
    virtualization_type: hvm
    root_device_name: /dev/xvda
    device_mapping:
      - device_name: /dev/xvda
        volume_size: 12
        snapshot_id: "{{ ec2_snapshot.snapshot_id }}"
        delete_on_termination: true
        volume_type: gp2
    enhanced_networking: yes
    sriov_net_support: simple
    tags:
      kite: "kite-image-{{ os }}-{{ arch }}"
  register: new_ami

- debug:
    var: new_ami

- name: save ami id into ssm parameter store
  community.aws.aws_ssm_parameter_store:
    profile: "{{ aws_profile }}"
    region: "{{ aws_region }}"
    name: "kite-image-{{ os }}-{{ arch }}"
    description: "Save latest {{ os }} {{ arch }} image id"
    value: "{{ new_ami.image_id }}"
