# Kickstart for creating a RHEL 8 Azure VM
# Note: Support for generation-1 and generation-2 VMs Azure -
#  This kickstart assumes the installation occurs on a UEFI-enabled VM, and
#  will produce a VM image that supports both UEFI and legacy BIOS boot.
#  More: https://docs.microsoft.com/en-us/azure/virtual-machines/linux/generation-2

text
lang en_US.UTF-8
keyboard --vckeymap=us --xlayouts='us'
timezone Etc/UTC --isUtc
auth --enableshadow --passalgo=sha512
selinux --enforcing

# Do not run the Setup Agent on first boot
firstboot --disable

# Network information
network --bootproto=dhcp
network --hostname=localhost.localdomain
firewall --enabled --service=ssh

# additional yum repositories that can be used as sources for package installation
{% if os == "rhel-8-1" %}
repo --name="BaseOS" --baseurl={{ repos[os][arch]["eusbaseos"] }} --cost=100
repo --name="AppStream" --baseurl={{ repos[os][arch]["eusappstream"] }} --cost=100
{% else %}
repo --name="BaseOS" --baseurl={{ repos[os][arch]["baseos"] }} --cost=100
repo --name="AppStream" --baseurl={{ repos[os][arch]["appstream"] }} --cost=100
{% endif %}

# Root password
rootpw --iscrypted nothing

# System services
{% if os == "rhel-8-4" or os == "rhel-8-5" %}
services --enabled=sshd,waagent,NetworkManager,nm-cloud-setup.service,nm-cloud-setup.timer,cloud-init,cloud-init-local,cloud-config,cloud-final --disabled kdump,rhsmcertd
{% else %}
services --enabled=sshd,waagent,NetworkManager,cloud-init,cloud-init-local,cloud-config,cloud-final --disabled kdump,rhsmcertd
{% endif %}

# Power down the machine after install
poweroff

# Partitioning and bootloader configuration
# Note: biosboot and efi partitions are pre-created in %pre.
zerombr
bootloader --location=mbr --timeout=1
# part biosboot --onpart=vda14 --size=4
part /boot/efi --onpart=vda15 --fstype=vfat --size=500
part /boot --fstype="xfs" --size=500
part / --fstype="xfs" --size=1 --grow --asprimary

%pre --log=/var/log/anaconda/pre-install.log --erroronfail
#!/bin/bash

# Pre-create the biosboot and EFI partitions
sgdisk --clear /dev/vda
sgdisk --new=14:2048:10239 /dev/vda
sgdisk --new=15:10240:500M /dev/vda
sgdisk --typecode=14:EF02 /dev/vda
sgdisk --typecode=15:EF00 /dev/vda

%end

# Disable kdump
%addon com_redhat_kdump --disable

%end

%packages
@core
kernel
yum-utils
WALinuxAgent

redhat-release
redhat-release-eula

# pull firmware packages out
-aic94xx-firmware
-alsa-firmware
-alsa-lib
-alsa-tools-firmware
-ivtv-firmware
-iwl1000-firmware
-iwl100-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3160-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-iwl6050-firmware
-iwl7260-firmware
-libertas-sd8686-firmware
-libertas-sd8787-firmware
-libertas-usb8388-firmware

# cloud-init does magical things with GCP metadata, including provisioning
# a user account with ssh keys.
cloud-init

# We need this image to be portable; also, rescue mode isn't useful here.
dracut-config-generic
dracut-norescue

# We need a bootloader. grub2 because of xfs.
grub2

# Needed initially, but removed below.
firewalld

# cherry-pick a few things from @base
tar
rsync
dhcp-client
NetworkManager
{% if os == "rhel-8-4" or os == "rhel-8-5" %}
NetworkManager-cloud-setup
{% endif %}

# Some things from @core we can do without in a minimal install
-biosdevname
# google cloud needs remove the "rhgb" and "quiet" kernel command-line arguments
-plymouth
-iprutils

# enable rootfs resize on boot
cloud-utils-growpart
gdisk

# add insight-clients
insights-client

# LTP dependence
python3
traceroute
xinetd
dnsmasq
dhcp-server
telnet
tcpdump
expect
net-tools
bind-utils
numactl-devel
libaio-devel
libaio
gdb
dosfstools
sysstat
ksh
tcsh
gcc
gcc-c++
git
wget
curl
bc
psmisc
quota
unzip
logrotate
bzip2
keyutils

# build LTP
make
pkgconf
autoconf
automake
bison
flex
m4
kernel-headers
glibc-headers

%end

%post --log=/var/log/anaconda/post-install.log --erroronfail

#!/bin/bash

passwd -d root
passwd -l root

# Set the kernel cmdline
sed -i 's/^\(GRUB_CMDLINE_LINUX\)=".*"$/\1="console=tty1 console=ttyS0,115200n8 earlyprintk=ttyS0,115200 rootdelay=300 net.ifnames=0 scsi_mod.use_blk_mq=y"/g' /etc/default/grub

# Enable grub serial console
echo 'GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1"' >> /etc/default/grub
sed -i 's/^GRUB_TERMINAL_OUTPUT=".*"$/GRUB_TERMINAL="serial console"/g' /etc/default/grub

# Enable BIOS bootloader
grub2-mkconfig --output /etc/grub2-efi.cfg
grub2-install --target=i386-pc --directory=/usr/lib/grub/i386-pc/ /dev/vda
grub2-mkconfig --output=/boot/grub2/grub.cfg

# Fix grub.cfg to remove EFI entries, otherwise "boot=" is not set correctly and blscfg fails
EFI_ID=`blkid --match-tag UUID --output value /dev/vda15`
BOOT_ID=`blkid --match-tag UUID --output value /dev/vda1`
sed -i 's/gpt15/gpt1/' /boot/grub2/grub.cfg
sed -i "s/${EFI_ID}/${BOOT_ID}/" /boot/grub2/grub.cfg
sed -i 's|${config_directory}/grubenv|(hd0,gpt15)/efi/centos/grubenv|' /boot/grub2/grub.cfg
sed -i '/^### BEGIN \/etc\/grub.d\/30_uefi/,/^### END \/etc\/grub.d\/30_uefi/{/^### BEGIN \/etc\/grub.d\/30_uefi/!{/^### END \/etc\/grub.d\/30_uefi/!d}}' /boot/grub2/grub.cfg

# Blacklist the nouveau driver
cat << EOF > /etc/modprobe.d/blacklist-nouveau.conf
blacklist nouveau
options nouveau modeset=0
EOF

# Ensure Hyper-V drivers are built into initramfs
echo '# Ensure Hyper-V drivers are built into initramfs'    >> /etc/dracut.conf.d/azure.conf
echo -e "\nadd_drivers+=\"hv_vmbus hv_netvsc hv_storvsc\""  >> /etc/dracut.conf.d/azure.conf
kversion=$( rpm -q kernel | sed 's/kernel\-//' )
dracut -v -f "/boot/initramfs-${kversion}.img" "$kversion"

# Enable SSH keepalive / Disable root SSH login
sed -i 's/^#\(ClientAliveInterval\).*$/\1 180/g' /etc/ssh/sshd_config
sed -i 's/^PermitRootLogin.*/#PermitRootLogin no/g' /etc/ssh/sshd_config

# Configure network
cat << EOF > /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=dhcp
TYPE=Ethernet
USERCTL=no
PEERDNS=yes
IPV6INIT=no
NM_CONTROLLED=yes
PERSISTENT_DHCLIENT=yes
EOF

cat << EOF > /etc/sysconfig/network
NETWORKING=yes
NOZEROCONF=yes
HOSTNAME=localhost.localdomain
EOF

# Disable NetworkManager handling of the SRIOV interfaces
cat <<EOF > /etc/udev/rules.d/68-azure-sriov-nm-unmanaged.rules

# Accelerated Networking on Azure exposes a new SRIOV interface to the VM.
# This interface is transparently bonded to the synthetic interface,
# so NetworkManager should just ignore any SRIOV interfaces.
SUBSYSTEM=="net", DRIVERS=="hv_pci", ACTION=="add", ENV{NM_UNMANAGED}="1"

EOF

# setup systemd to boot to the right runlevel
echo -n "Setting default runlevel to multiuser text mode"
rm -f /etc/systemd/system/default.target
ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target
echo .

# Remove firewalld; it is required to be present for install/image building.
echo "Removing firewalld."
yum -C -y --noplugins remove firewalld --setopt="clean_requirements_on_remove=1"

# Update dnf configuration
echo "http_caching=packages" >> /etc/dnf/dnf.conf
dnf clean all

echo "Cleaning old yum repodata."
yum --noplugins clean all
truncate -c -s 0 /var/log/yum.log

# tell cloud-init to create the gcp account
sed -i 's/cloud-user/admin/' /etc/cloud/cloud.cfg

# cloud-init will add "admin" as sudoers in /etc/sudoers.d/90-cloud-init-users

# Disable subscription-manager yum plugins
sed -i 's|^enabled=1|enabled=0|' /etc/yum/pluginconf.d/product-id.conf
sed -i 's|^enabled=1|enabled=0|' /etc/yum/pluginconf.d/subscription-manager.conf

cat /dev/null > /etc/machine-id

# Set tuned profile
echo "virtual-guest" > /etc/tuned/active_profile

# Build and install ltp
wget https://github.com/linux-test-project/ltp/archive/20210121.tar.gz
tar -zxf 20210121.tar.gz
cd ltp-20210121 && autoreconf -i && ./configure && make all && make install
cd .. && rm -f 20210121.tar.gz && rm -rf ltp-20210121

# Deprovision and prepare for Azure
/usr/sbin/waagent -force -deprovision

%end
