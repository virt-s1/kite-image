# network installation
url --url {{ repos[os][arch]["baseos"] }}

text
lang en_US.UTF-8
keyboard us
timezone --utc Asia/Shanghai
# repo for install packages which are not included in baseos
repo --name="BaseOS" --baseurl={{ repos[os][arch]["baseos"] }} --cost=100
repo --name="AppStream" --baseurl={{ repos[os][arch]["appstream"] }} --cost=100

network  --bootproto=dhcp --device=link --activate --onboot=on
firewall --enabled --ssh
selinux --enforcing
auth --enableshadow --passalgo=sha512
rootpw --iscrypted nope
user --name=admin --groups=wheel --iscrypted --password=$6$Rg59Zmow24O14.pd$9F7IIzT0S38XKOG/4yIbt17iRLy3bIlWMvVmxlD72Tg1Uf7MLgv5PWDzoN1zgS.8U5PMn60pw1o69LISplaXU1
sshkey --username=admin "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDMiTGemx2gjWkPCApWZHblN34WaD3cIiuv6zU1S4dtSumR3NeCdUnA9fBgDGyKErIbxtI1XICoLCulv7zPQuUNa/H/iv1yyH2o+5ZuQe8sLtX5bO0nfVdBWSWQu0EMgyaHrPnt642Cby91YLjX8AVkfRPczHkE3mRTJpkYmdeYRPZqNe6+o9A4LVa5/ZNEgzQLs2fXAJlQWP24nueRm8ypdHt0HvZa4wsHELaG7AXlcz3pmg+4I256UG2f5Y99k10CqAYteRtILrR3oXary9pDd4tg9/aCS3T7GYZGi8l5CdZ2LZwHf6pLZM/O9Lf4rjDysyfPw7RZ2uwF0SRpDfUrqrufgEHCLtfADfYg0qf/iulGoLaM3OTI+Jbyra2JXP1tlzyOUUDm1dwABRTcQvujSYrdnJM4M4BHo3ca1U8Fkh/KgjVahfIYH0kx+FjT964lJAJfxU0O3nnsytiEghLk1DuHta6VNuTRehF5gbhNC2Cc6yqbSZ+lp68bU4dRDm0= kite-test"

services --enabled=sshd,NetworkManager,cloud-init,cloud-init-local,cloud-config,cloud-final

bootloader --location=mbr --append="console=ttyS0,115200n8 net.ifnames=0 biosdevname=0"
zerombr
clearpart --all --initlabel
autopart --type=lvm --fstype=xfs

shutdown

%post --log=/var/log/anaconda/post-install.log --erroronfail
# workaround anaconda requirements
passwd -d root
passwd -l root

# set environment variable to mark cloud platform
cat > /etc/profile.d/platform.sh << EOF
export PLATFORM="esxi"
EOF

cat <<EOF > /etc/yum.repos.d/nightly.repo
[RHEL-8-NIGHTLY-BaseOS]
name=baseos
baseurl={{ repos[os][arch]["baseos"] }}
enabled=1
gpgcheck=0

[RHEL-8-NIGHTLY-AppStream]
name=appstream
baseurl={{ repos[os][arch]["appstream"] }}
enabled=1
gpgcheck=0
EOF

# setup systemd to boot to the right runlevel
echo -n "Setting default runlevel to multiuser text mode"
rm -f /etc/systemd/system/default.target
ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target
echo .

# Remove firewalld; it is required to be present for install/image building.
echo "Removing firewalld."
yum -C -y --noplugins remove firewalld --setopt="clean_requirements_on_remove=1"

echo -n "Getty fixes"
# although we want console output going to the serial console, we don't
# actually have the opportunity to login there. FIX.
# we don't really need to auto-spawn _any_ gettys.
sed -i '/^#NAutoVTs=.*/ a\
NAutoVTs=0' /etc/systemd/logind.conf

echo -n "Network fixes"
# initscripts don't like this file to be missing.
cat > /etc/sysconfig/network << EOF
NETWORKING=yes
NOZEROCONF=yes
EOF

# For cloud images, 'eth0' _is_ the predictable device name, since
# we don't want to be tied to specific virtual (!) hardware
rm -f /etc/udev/rules.d/70*
ln -s /dev/null /etc/udev/rules.d/80-net-name-slot.rules

# simple eth0 config, again not hard-coded to the build hardware
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE="eth0"
BOOTPROTO="dhcp"
ONBOOT="yes"
TYPE="Ethernet"
USERCTL="yes"
PEERDNS="yes"
IPV6INIT="no"
EOF

# generic localhost names
cat > /etc/hosts << EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

EOF
echo .

cat <<EOL > /etc/sysconfig/kernel
# UPDATEDEFAULT specifies if new-kernel-pkg should make
# new kernels the default
UPDATEDEFAULT=yes

# DEFAULTKERNEL specifies the default kernel package type
DEFAULTKERNEL=kernel
EOL

# make sure firstboot doesn't start
echo "RUN_FIRSTBOOT=NO" > /etc/sysconfig/firstboot

# workaround https://bugzilla.redhat.com/show_bug.cgi?id=966888
if ! grep -q growpart /etc/cloud/cloud.cfg; then
  sed -i 's/ - resizefs/ - growpart\n - resizefs/' /etc/cloud/cloud.cfg
fi

# tell cloud-init to create the ec2-user account
sed -i 's/cloud-user/admin/' /etc/cloud/cloud.cfg

# allow sudo powers to ec2-user
echo -e 'admin\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers

# Disable subscription-manager yum plugins
sed -i 's|^enabled=1|enabled=0|' /etc/yum/pluginconf.d/product-id.conf
sed -i 's|^enabled=1|enabled=0|' /etc/yum/pluginconf.d/subscription-manager.conf

echo "Cleaning old yum repodata."
yum --noplugins clean all
truncate -c -s 0 /var/log/yum.log

echo "Fixing SELinux contexts."
touch /var/log/cron
touch /var/log/boot.log
mkdir -p /var/cache/yum
/usr/sbin/fixfiles -R -a restore

# remove random-seed so it's not the same every time
rm -f /var/lib/systemd/random-seed

# Remove machine-id on the pre generated images
cat /dev/null > /etc/machine-id

# Build and install ltp
wget https://github.com/linux-test-project/ltp/archive/20210121.tar.gz
tar -zxf 20210121.tar.gz
cd ltp-20210121 && autoreconf -i && ./configure && make all && make install
cd .. && rm -f 20210121.tar.gz && rm -rf ltp-20210121

# Anaconda is writing to /etc/resolv.conf from the generating environment.
# The system should start out with an empty file.
# this one should be the last instruction of post script,
# otherwise no dns server will be available after this
truncate -s 0 /etc/resolv.conf

%end

%packages
@core
kernel
yum-utils
open-vm-tools

redhat-release
redhat-release-eula

# cloud-init does magical things with EC2 metadata, including provisioning
# a user account with ssh keys.
cloud-init

# need this for growpart, because parted doesn't yet support resizepart
# https://bugzilla.redhat.com/show_bug.cgi?id=966993
#cloud-utils

# We need this image to be portable; also, rescue mode isn't useful here.
dracut-config-generic
dracut-norescue

# We need a bootloader. grub2 because of xfs.
grub2

# Needed initially, but removed below.
firewalld

# cherry-pick a few things from @base
tar
rsync
dhcp-client
NetworkManager
{% if os != "rhel-8-1" and os != "rhel-8-0" %}
NetworkManager-cloud-setup
{% endif %}

# enable rootfs resize on boot
cloud-utils-growpart
gdisk

# add insight-clients
insights-client

# LTP dependence
python3
traceroute
xinetd
dnsmasq
dhcp-server
telnet
tcpdump
expect
net-tools
bind-utils
numactl-devel
libaio-devel
libaio
gdb
dosfstools
sysstat
ksh
tcsh
gcc
gcc-c++
git
wget
curl
bc
psmisc
quota
unzip
logrotate
bzip2
keyutils

# build LTP
make
pkgconf
autoconf
automake
bison
flex
m4
kernel-headers
glibc-headers
%end
