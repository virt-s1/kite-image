# Kickstart file to build RHEL-8 OpenStack image

text
lang en_US.UTF-8
keyboard us
timezone --utc UTC
auth --enableshadow --passalgo=sha512
shutdown
firewall --enabled --service=ssh
firstboot --disable
ignoredisk --only-use=vda

# additional yum repositories that can be used as sources for package installation
repo --name="BaseOS" --baseurl={{ repos[os][arch]["baseos"] }} --cost=100
repo --name="AppStream" --baseurl={{ repos[os][arch]["appstream"] }} --cost=100

# Network information
network --bootproto=dhcp --device=link --activate --onboot=on
network --hostname=localhost.localdomain

# Root password
rootpw --iscrypted --lock

selinux --enforcing
services --disabled="kdump" --enabled="NetworkManager,sshd,cloud-init,cloud-init-local,cloud-config,cloud-final,rngd"

# Disk
bootloader --append="console=ttyS0,115200n8 no_timer_check net.ifnames=0" --location=mbr --timeout=1 --boot-drive=vda 
zerombr
clearpart --all --initlabel 
reqpart
part / --fstype="xfs" --ondisk=vda --size=8000

%post --erroronfail
passwd -d root
passwd -l root

# pvgrub support
echo -n "Creating grub.conf for pvgrub"
rootuuid=$( awk '$2=="/" { print $1 };'  /etc/fstab )
mkdir /boot/grub
echo -e 'default=0\ntimeout=0\n\n' > /boot/grub/grub.conf
for kv in $( ls -1v /boot/vmlinuz* |grep -v rescue |sed s/.*vmlinuz-//  ); do
  echo "title RHEL 8 ($kv)" >> /boot/grub/grub.conf
  echo -e "\troot (hd0)" >> /boot/grub/grub.conf
  echo -e "\tkernel /boot/vmlinuz-$kv ro root=$rootuuid console=hvc0 LANG=en_US.UTF-8" >> /boot/grub/grub.conf
  echo -e "\tinitrd /boot/initramfs-$kv.img" >> /boot/grub/grub.conf
  echo
done
ln -sf grub.conf /boot/grub/menu.lst
ln -sf /boot/grub/grub.conf /etc/grub.conf

# setup systemd to boot to the right runlevel
rm -f /etc/systemd/system/default.target
ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target
echo .

# Remove firewalld; it is required to be present for install/image building.
# but we dont ship it in cloud
dnf -C -y remove firewalld --setopt="clean_requirements_on_remove=1"
dnf -C -y remove avahi\* 

echo -n "Getty fixes"
# although we want console output going to the serial console, we don't
# actually have the opportunity to login there. FIX.
# we don't really need to auto-spawn _any_ gettys.
sed -i '/^#NAutoVTs=.*/ a\
NAutoVTs=0' /etc/systemd/logind.conf

echo -n "Network fixes"
# initscripts don't like this file to be missing.
cat > /etc/sysconfig/network << EOF
NETWORKING=yes
NOZEROCONF=yes
EOF

# For cloud images, 'eth0' _is_ the predictable device name, since
# we don't want to be tied to specific virtual (!) hardware
rm -f /etc/udev/rules.d/70*
ln -s /dev/null /etc/udev/rules.d/80-net-name-slot.rules

# simple eth0 config, again not hard-coded to the build hardware
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE="eth0"
BOOTPROTO="dhcp"
ONBOOT="yes"
TYPE="Ethernet"
USERCTL="yes"
PEERDNS="yes"
IPV6INIT="no"
PERSISTENT_DHCLIENT="1"
EOF

echo "virtual-guest" > /etc/tuned/active_profile

# generic localhost names
cat > /etc/hosts << EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

EOF
echo .

cat <<EOL > /etc/sysconfig/kernel
# UPDATEDEFAULT specifies if new-kernel-pkg should make
# new kernels the default
UPDATEDEFAULT=yes

# DEFAULTKERNEL specifies the default kernel package type
DEFAULTKERNEL=kernel
EOL

# make sure firstboot doesn't start
echo "RUN_FIRSTBOOT=NO" > /etc/sysconfig/firstboot

# RHEL cloud user
sed -i 's/name: cloud-user/name: admin/g' /etc/cloud/cloud.cfg

# allow sudo powers to admin
echo -e 'admin\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers

# Disable subscription-manager yum plugins
sed -i 's|^enabled=1|enabled=0|' /etc/yum/pluginconf.d/product-id.conf
sed -i 's|^enabled=1|enabled=0|' /etc/yum/pluginconf.d/subscription-manager.conf

echo "Cleaning old yum repodata."
yum --noplugins clean all
truncate -c -s 0 /var/log/yum.log

# remove random-seed so it's not the same every time
rm -f /var/lib/systemd/random-seed

# Remove machine-id on the pre generated images
cat /dev/null > /etc/machine-id

echo "Fixing SELinux contexts."
touch /var/log/cron
touch /var/log/boot.log
mkdir -p /var/cache/yum
/usr/sbin/fixfiles -R -a restore

# reorder console entries
sed -i 's/console=tty0/console=tty0 console=ttyS0,115200n8/' /boot/grub2/grub.cfg

# set environment variable to mark cloud platform
cat > /etc/profile.d/platform.sh << EOF
export PLATFORM="openstack"
EOF

# add nightly repo
cat <<EOF > /etc/yum.repos.d/nightly.repo
[RHEL-8-NIGHTLY-BaseOS]
name=baseos
baseurl={{ repos[os][arch]["baseos"] }}
enabled=1
gpgcheck=0

[RHEL-8-NIGHTLY-AppStream]
name=appstream
baseurl={{ repos[os][arch]["appstream"] }}
enabled=1
gpgcheck=0
EOF

# Build and install ltp
wget https://github.com/linux-test-project/ltp/archive/20210121.tar.gz
tar -zxf 20210121.tar.gz
cd ltp-20210121 && autoreconf -i && ./configure && make all && make install
cd .. && rm -f 20210121.tar.gz && rm -rf ltp-20210121

# Anaconda is writing to /etc/resolv.conf from the generating environment.
# The system should start out with an empty file.
# this one should be the last instruction of post script,
# otherwise no dns server will be available after this
truncate -s 0 /etc/resolv.conf

%end

%packages
@core
kernel
yum-utils
rng-tools

redhat-release
redhat-release-eula

# pull firmware packages out
-aic94xx-firmware
-alsa-firmware
-alsa-lib
-alsa-tools-firmware
-ivtv-firmware
-iwl100-firmware
-iwl1000-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3160-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-iwl6050-firmware
-iwl7260-firmware
-libertas-sd8686-firmware
-libertas-sd8787-firmware
-libertas-usb8388-firmware

# cloud-init does magical things with openstack metadata, including provisioning
# a user account with ssh keys.
cloud-init

# We need this image to be portable; also, rescue mode isn't useful here.
dracut-config-generic
dracut-norescue

# We need a bootloader. grub2 because of xfs.
grub2

# Needed initially, but removed below.
firewalld

# cherry-pick a few things from @base
tar
rsync
dhcp-client
NetworkManager
{% if os != "rhel-8-1" and os != "rhel-8-0" %}
NetworkManager-cloud-setup
{% endif %}

# Some things from @core we can do without in a minimal install
-biosdevname
-plymouth
-iprutils

# enable rootfs resize on boot
cloud-utils-growpart
gdisk

# add insight-clients
insights-client

python3
traceroute
xinetd
dnsmasq
dhcp-server
telnet
tcpdump
expect
net-tools
bind-utils
numactl-devel
libaio-devel
libaio
gdb
dosfstools
sysstat
ksh
tcsh
gcc
gcc-c++
git
wget
curl
bc
psmisc
quota
unzip
logrotate
bzip2
keyutils

# build LTP
make
pkgconf
autoconf
automake
bison
flex
m4
kernel-headers
glibc-headers
%end
